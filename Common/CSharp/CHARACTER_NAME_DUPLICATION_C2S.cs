// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace protocol
{

using global::System;
using global::System.Collections.Generic;
using global::FlatBuffers;

public struct CHARACTER_NAME_DUPLICATION_C2S : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_2_0_0(); }
  public static CHARACTER_NAME_DUPLICATION_C2S GetRootAsCHARACTER_NAME_DUPLICATION_C2S(ByteBuffer _bb) { return GetRootAsCHARACTER_NAME_DUPLICATION_C2S(_bb, new CHARACTER_NAME_DUPLICATION_C2S()); }
  public static CHARACTER_NAME_DUPLICATION_C2S GetRootAsCHARACTER_NAME_DUPLICATION_C2S(ByteBuffer _bb, CHARACTER_NAME_DUPLICATION_C2S obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public CHARACTER_NAME_DUPLICATION_C2S __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public string NickName { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetNickNameBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetNickNameBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetNickNameArray() { return __p.__vector_as_array<byte>(4); }

  public static Offset<protocol.CHARACTER_NAME_DUPLICATION_C2S> CreateCHARACTER_NAME_DUPLICATION_C2S(FlatBufferBuilder builder,
      StringOffset nick_nameOffset = default(StringOffset)) {
    builder.StartTable(1);
    CHARACTER_NAME_DUPLICATION_C2S.AddNickName(builder, nick_nameOffset);
    return CHARACTER_NAME_DUPLICATION_C2S.EndCHARACTER_NAME_DUPLICATION_C2S(builder);
  }

  public static void StartCHARACTER_NAME_DUPLICATION_C2S(FlatBufferBuilder builder) { builder.StartTable(1); }
  public static void AddNickName(FlatBufferBuilder builder, StringOffset nickNameOffset) { builder.AddOffset(0, nickNameOffset.Value, 0); }
  public static Offset<protocol.CHARACTER_NAME_DUPLICATION_C2S> EndCHARACTER_NAME_DUPLICATION_C2S(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<protocol.CHARACTER_NAME_DUPLICATION_C2S>(o);
  }
};


}
