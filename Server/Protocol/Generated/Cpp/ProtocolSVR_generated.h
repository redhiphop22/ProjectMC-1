// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_PROTOCOLSVR_PROTOCOL_SVR_H_
#define FLATBUFFERS_GENERATED_PROTOCOLSVR_PROTOCOL_SVR_H_

#include "flatbuffers/flatbuffers.h"

#include "Common_generated.h"
#include "Result_generated.h"

namespace protocol_svr {

struct LOGIN_DB_REQ;
struct LOGIN_DB_REQBuilder;

struct LOGIN_DB_ACK;
struct LOGIN_DB_ACKBuilder;

struct SERVER_CONNECT_DB_REQ;
struct SERVER_CONNECT_DB_REQBuilder;

struct SERVER_CONNECT_DB_ACK;
struct SERVER_CONNECT_DB_ACKBuilder;

struct CHARACTER_INFO_DB_REQ;
struct CHARACTER_INFO_DB_REQBuilder;

struct CHARACTER_INFO_DB_ACK;
struct CHARACTER_INFO_DB_ACKBuilder;

struct CHARACTER_NAME_DUPLICATION_DB_REQ;
struct CHARACTER_NAME_DUPLICATION_DB_REQBuilder;

struct CHARACTER_NAME_DUPLICATION_DB_ACK;
struct CHARACTER_NAME_DUPLICATION_DB_ACKBuilder;

struct CHARACTER_CREATE_DB_REQ;
struct CHARACTER_CREATE_DB_REQBuilder;

struct CHARACTER_CREATE_DB_ACK;
struct CHARACTER_CREATE_DB_ACKBuilder;

enum MESSAGE : uint16_t {
  MESSAGE_LOGIN_DB_REQ = 0,
  MESSAGE_LOGIN_DB_ACK = 1,
  MESSAGE_SERVER_CONNECT_DB_REQ = 2,
  MESSAGE_SERVER_CONNECT_DB_ACK = 3,
  MESSAGE_CHARACTER_INFO_DB_REQ = 4,
  MESSAGE_CHARACTER_INFO_DB_ACK = 5,
  MESSAGE_CHARACTER_NAME_DUPLICATION_DB_REQ = 6,
  MESSAGE_CHARACTER_NAME_DUPLICATION_DB_ACK = 7,
  MESSAGE_CHARACTER_CREATE_DB_REQ = 8,
  MESSAGE_CHARACTER_CREATE_DB_ACK = 9,
  MESSAGE_MIN = MESSAGE_LOGIN_DB_REQ,
  MESSAGE_MAX = MESSAGE_CHARACTER_CREATE_DB_ACK
};

inline const MESSAGE (&EnumValuesMESSAGE())[10] {
  static const MESSAGE values[] = {
    MESSAGE_LOGIN_DB_REQ,
    MESSAGE_LOGIN_DB_ACK,
    MESSAGE_SERVER_CONNECT_DB_REQ,
    MESSAGE_SERVER_CONNECT_DB_ACK,
    MESSAGE_CHARACTER_INFO_DB_REQ,
    MESSAGE_CHARACTER_INFO_DB_ACK,
    MESSAGE_CHARACTER_NAME_DUPLICATION_DB_REQ,
    MESSAGE_CHARACTER_NAME_DUPLICATION_DB_ACK,
    MESSAGE_CHARACTER_CREATE_DB_REQ,
    MESSAGE_CHARACTER_CREATE_DB_ACK
  };
  return values;
}

inline const char * const *EnumNamesMESSAGE() {
  static const char * const names[11] = {
    "LOGIN_DB_REQ",
    "LOGIN_DB_ACK",
    "SERVER_CONNECT_DB_REQ",
    "SERVER_CONNECT_DB_ACK",
    "CHARACTER_INFO_DB_REQ",
    "CHARACTER_INFO_DB_ACK",
    "CHARACTER_NAME_DUPLICATION_DB_REQ",
    "CHARACTER_NAME_DUPLICATION_DB_ACK",
    "CHARACTER_CREATE_DB_REQ",
    "CHARACTER_CREATE_DB_ACK",
    nullptr
  };
  return names;
}

inline const char *EnumNameMESSAGE(MESSAGE e) {
  if (flatbuffers::IsOutRange(e, MESSAGE_LOGIN_DB_REQ, MESSAGE_CHARACTER_CREATE_DB_ACK)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesMESSAGE()[index];
}

struct LOGIN_DB_REQ FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef LOGIN_DB_REQBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_ID = 4,
    VT_PW = 6
  };
  const flatbuffers::String *id() const {
    return GetPointer<const flatbuffers::String *>(VT_ID);
  }
  const flatbuffers::String *pw() const {
    return GetPointer<const flatbuffers::String *>(VT_PW);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_ID) &&
           verifier.VerifyString(id()) &&
           VerifyOffset(verifier, VT_PW) &&
           verifier.VerifyString(pw()) &&
           verifier.EndTable();
  }
};

struct LOGIN_DB_REQBuilder {
  typedef LOGIN_DB_REQ Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_id(flatbuffers::Offset<flatbuffers::String> id) {
    fbb_.AddOffset(LOGIN_DB_REQ::VT_ID, id);
  }
  void add_pw(flatbuffers::Offset<flatbuffers::String> pw) {
    fbb_.AddOffset(LOGIN_DB_REQ::VT_PW, pw);
  }
  explicit LOGIN_DB_REQBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<LOGIN_DB_REQ> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<LOGIN_DB_REQ>(end);
    return o;
  }
};

inline flatbuffers::Offset<LOGIN_DB_REQ> CreateLOGIN_DB_REQ(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> id = 0,
    flatbuffers::Offset<flatbuffers::String> pw = 0) {
  LOGIN_DB_REQBuilder builder_(_fbb);
  builder_.add_pw(pw);
  builder_.add_id(id);
  return builder_.Finish();
}

inline flatbuffers::Offset<LOGIN_DB_REQ> CreateLOGIN_DB_REQDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *id = nullptr,
    const char *pw = nullptr) {
  auto id__ = id ? _fbb.CreateString(id) : 0;
  auto pw__ = pw ? _fbb.CreateString(pw) : 0;
  return protocol_svr::CreateLOGIN_DB_REQ(
      _fbb,
      id__,
      pw__);
}

struct LOGIN_DB_ACK FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef LOGIN_DB_ACKBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_RESULT = 4
  };
  common::RESULT_CODE result() const {
    return static_cast<common::RESULT_CODE>(GetField<uint32_t>(VT_RESULT, 0));
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint32_t>(verifier, VT_RESULT) &&
           verifier.EndTable();
  }
};

struct LOGIN_DB_ACKBuilder {
  typedef LOGIN_DB_ACK Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_result(common::RESULT_CODE result) {
    fbb_.AddElement<uint32_t>(LOGIN_DB_ACK::VT_RESULT, static_cast<uint32_t>(result), 0);
  }
  explicit LOGIN_DB_ACKBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<LOGIN_DB_ACK> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<LOGIN_DB_ACK>(end);
    return o;
  }
};

inline flatbuffers::Offset<LOGIN_DB_ACK> CreateLOGIN_DB_ACK(
    flatbuffers::FlatBufferBuilder &_fbb,
    common::RESULT_CODE result = common::RESULT_CODE_ERROR_FAIL) {
  LOGIN_DB_ACKBuilder builder_(_fbb);
  builder_.add_result(result);
  return builder_.Finish();
}

struct SERVER_CONNECT_DB_REQ FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef SERVER_CONNECT_DB_REQBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_UID = 4,
    VT_ID = 6
  };
  uint64_t uid() const {
    return GetField<uint64_t>(VT_UID, 0);
  }
  const flatbuffers::String *id() const {
    return GetPointer<const flatbuffers::String *>(VT_ID);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint64_t>(verifier, VT_UID) &&
           VerifyOffset(verifier, VT_ID) &&
           verifier.VerifyString(id()) &&
           verifier.EndTable();
  }
};

struct SERVER_CONNECT_DB_REQBuilder {
  typedef SERVER_CONNECT_DB_REQ Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_uid(uint64_t uid) {
    fbb_.AddElement<uint64_t>(SERVER_CONNECT_DB_REQ::VT_UID, uid, 0);
  }
  void add_id(flatbuffers::Offset<flatbuffers::String> id) {
    fbb_.AddOffset(SERVER_CONNECT_DB_REQ::VT_ID, id);
  }
  explicit SERVER_CONNECT_DB_REQBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<SERVER_CONNECT_DB_REQ> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<SERVER_CONNECT_DB_REQ>(end);
    return o;
  }
};

inline flatbuffers::Offset<SERVER_CONNECT_DB_REQ> CreateSERVER_CONNECT_DB_REQ(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint64_t uid = 0,
    flatbuffers::Offset<flatbuffers::String> id = 0) {
  SERVER_CONNECT_DB_REQBuilder builder_(_fbb);
  builder_.add_uid(uid);
  builder_.add_id(id);
  return builder_.Finish();
}

inline flatbuffers::Offset<SERVER_CONNECT_DB_REQ> CreateSERVER_CONNECT_DB_REQDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint64_t uid = 0,
    const char *id = nullptr) {
  auto id__ = id ? _fbb.CreateString(id) : 0;
  return protocol_svr::CreateSERVER_CONNECT_DB_REQ(
      _fbb,
      uid,
      id__);
}

struct SERVER_CONNECT_DB_ACK FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef SERVER_CONNECT_DB_ACKBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_UID = 4,
    VT_RESULT = 6,
    VT_AUTHORITY = 8,
    VT_BLOCK_TYPE = 10,
    VT_BLOCK_DATE = 12
  };
  uint64_t uid() const {
    return GetField<uint64_t>(VT_UID, 0);
  }
  common::RESULT_CODE result() const {
    return static_cast<common::RESULT_CODE>(GetField<uint32_t>(VT_RESULT, 0));
  }
  common::ACCOUNT_AUTHORITY authority() const {
    return static_cast<common::ACCOUNT_AUTHORITY>(GetField<uint8_t>(VT_AUTHORITY, 0));
  }
  common::ACCOUNT_BLOCK_TYPE block_type() const {
    return static_cast<common::ACCOUNT_BLOCK_TYPE>(GetField<uint8_t>(VT_BLOCK_TYPE, 0));
  }
  uint64_t block_date() const {
    return GetField<uint64_t>(VT_BLOCK_DATE, 0);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint64_t>(verifier, VT_UID) &&
           VerifyField<uint32_t>(verifier, VT_RESULT) &&
           VerifyField<uint8_t>(verifier, VT_AUTHORITY) &&
           VerifyField<uint8_t>(verifier, VT_BLOCK_TYPE) &&
           VerifyField<uint64_t>(verifier, VT_BLOCK_DATE) &&
           verifier.EndTable();
  }
};

struct SERVER_CONNECT_DB_ACKBuilder {
  typedef SERVER_CONNECT_DB_ACK Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_uid(uint64_t uid) {
    fbb_.AddElement<uint64_t>(SERVER_CONNECT_DB_ACK::VT_UID, uid, 0);
  }
  void add_result(common::RESULT_CODE result) {
    fbb_.AddElement<uint32_t>(SERVER_CONNECT_DB_ACK::VT_RESULT, static_cast<uint32_t>(result), 0);
  }
  void add_authority(common::ACCOUNT_AUTHORITY authority) {
    fbb_.AddElement<uint8_t>(SERVER_CONNECT_DB_ACK::VT_AUTHORITY, static_cast<uint8_t>(authority), 0);
  }
  void add_block_type(common::ACCOUNT_BLOCK_TYPE block_type) {
    fbb_.AddElement<uint8_t>(SERVER_CONNECT_DB_ACK::VT_BLOCK_TYPE, static_cast<uint8_t>(block_type), 0);
  }
  void add_block_date(uint64_t block_date) {
    fbb_.AddElement<uint64_t>(SERVER_CONNECT_DB_ACK::VT_BLOCK_DATE, block_date, 0);
  }
  explicit SERVER_CONNECT_DB_ACKBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<SERVER_CONNECT_DB_ACK> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<SERVER_CONNECT_DB_ACK>(end);
    return o;
  }
};

inline flatbuffers::Offset<SERVER_CONNECT_DB_ACK> CreateSERVER_CONNECT_DB_ACK(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint64_t uid = 0,
    common::RESULT_CODE result = common::RESULT_CODE_ERROR_FAIL,
    common::ACCOUNT_AUTHORITY authority = common::ACCOUNT_AUTHORITY_GUEST,
    common::ACCOUNT_BLOCK_TYPE block_type = common::ACCOUNT_BLOCK_TYPE_NONE,
    uint64_t block_date = 0) {
  SERVER_CONNECT_DB_ACKBuilder builder_(_fbb);
  builder_.add_block_date(block_date);
  builder_.add_uid(uid);
  builder_.add_result(result);
  builder_.add_block_type(block_type);
  builder_.add_authority(authority);
  return builder_.Finish();
}

struct CHARACTER_INFO_DB_REQ FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef CHARACTER_INFO_DB_REQBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_UID = 4
  };
  uint64_t uid() const {
    return GetField<uint64_t>(VT_UID, 0);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint64_t>(verifier, VT_UID) &&
           verifier.EndTable();
  }
};

struct CHARACTER_INFO_DB_REQBuilder {
  typedef CHARACTER_INFO_DB_REQ Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_uid(uint64_t uid) {
    fbb_.AddElement<uint64_t>(CHARACTER_INFO_DB_REQ::VT_UID, uid, 0);
  }
  explicit CHARACTER_INFO_DB_REQBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<CHARACTER_INFO_DB_REQ> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<CHARACTER_INFO_DB_REQ>(end);
    return o;
  }
};

inline flatbuffers::Offset<CHARACTER_INFO_DB_REQ> CreateCHARACTER_INFO_DB_REQ(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint64_t uid = 0) {
  CHARACTER_INFO_DB_REQBuilder builder_(_fbb);
  builder_.add_uid(uid);
  return builder_.Finish();
}

struct CHARACTER_INFO_DB_ACK FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef CHARACTER_INFO_DB_ACKBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_UID = 4,
    VT_RESULT = 6,
    VT_NICK_NAME = 8,
    VT_TYPE = 10,
    VT_BELONG = 12,
    VT_FACE = 14,
    VT_EQUIPMENT = 16
  };
  uint64_t uid() const {
    return GetField<uint64_t>(VT_UID, 0);
  }
  common::RESULT_CODE result() const {
    return static_cast<common::RESULT_CODE>(GetField<uint32_t>(VT_RESULT, 0));
  }
  const flatbuffers::String *nick_name() const {
    return GetPointer<const flatbuffers::String *>(VT_NICK_NAME);
  }
  common::CHARACTER_TYPE type() const {
    return static_cast<common::CHARACTER_TYPE>(GetField<uint8_t>(VT_TYPE, 0));
  }
  uint16_t belong() const {
    return GetField<uint16_t>(VT_BELONG, 0);
  }
  const common::CHARACTER_FACE *face() const {
    return GetPointer<const common::CHARACTER_FACE *>(VT_FACE);
  }
  const flatbuffers::Vector<flatbuffers::Offset<common::CHARACTER_EQUIPMENT>> *equipment() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<common::CHARACTER_EQUIPMENT>> *>(VT_EQUIPMENT);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint64_t>(verifier, VT_UID) &&
           VerifyField<uint32_t>(verifier, VT_RESULT) &&
           VerifyOffset(verifier, VT_NICK_NAME) &&
           verifier.VerifyString(nick_name()) &&
           VerifyField<uint8_t>(verifier, VT_TYPE) &&
           VerifyField<uint16_t>(verifier, VT_BELONG) &&
           VerifyOffset(verifier, VT_FACE) &&
           verifier.VerifyTable(face()) &&
           VerifyOffset(verifier, VT_EQUIPMENT) &&
           verifier.VerifyVector(equipment()) &&
           verifier.VerifyVectorOfTables(equipment()) &&
           verifier.EndTable();
  }
};

struct CHARACTER_INFO_DB_ACKBuilder {
  typedef CHARACTER_INFO_DB_ACK Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_uid(uint64_t uid) {
    fbb_.AddElement<uint64_t>(CHARACTER_INFO_DB_ACK::VT_UID, uid, 0);
  }
  void add_result(common::RESULT_CODE result) {
    fbb_.AddElement<uint32_t>(CHARACTER_INFO_DB_ACK::VT_RESULT, static_cast<uint32_t>(result), 0);
  }
  void add_nick_name(flatbuffers::Offset<flatbuffers::String> nick_name) {
    fbb_.AddOffset(CHARACTER_INFO_DB_ACK::VT_NICK_NAME, nick_name);
  }
  void add_type(common::CHARACTER_TYPE type) {
    fbb_.AddElement<uint8_t>(CHARACTER_INFO_DB_ACK::VT_TYPE, static_cast<uint8_t>(type), 0);
  }
  void add_belong(uint16_t belong) {
    fbb_.AddElement<uint16_t>(CHARACTER_INFO_DB_ACK::VT_BELONG, belong, 0);
  }
  void add_face(flatbuffers::Offset<common::CHARACTER_FACE> face) {
    fbb_.AddOffset(CHARACTER_INFO_DB_ACK::VT_FACE, face);
  }
  void add_equipment(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<common::CHARACTER_EQUIPMENT>>> equipment) {
    fbb_.AddOffset(CHARACTER_INFO_DB_ACK::VT_EQUIPMENT, equipment);
  }
  explicit CHARACTER_INFO_DB_ACKBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<CHARACTER_INFO_DB_ACK> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<CHARACTER_INFO_DB_ACK>(end);
    return o;
  }
};

inline flatbuffers::Offset<CHARACTER_INFO_DB_ACK> CreateCHARACTER_INFO_DB_ACK(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint64_t uid = 0,
    common::RESULT_CODE result = common::RESULT_CODE_ERROR_FAIL,
    flatbuffers::Offset<flatbuffers::String> nick_name = 0,
    common::CHARACTER_TYPE type = common::CHARACTER_TYPE_NONE,
    uint16_t belong = 0,
    flatbuffers::Offset<common::CHARACTER_FACE> face = 0,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<common::CHARACTER_EQUIPMENT>>> equipment = 0) {
  CHARACTER_INFO_DB_ACKBuilder builder_(_fbb);
  builder_.add_uid(uid);
  builder_.add_equipment(equipment);
  builder_.add_face(face);
  builder_.add_nick_name(nick_name);
  builder_.add_result(result);
  builder_.add_belong(belong);
  builder_.add_type(type);
  return builder_.Finish();
}

inline flatbuffers::Offset<CHARACTER_INFO_DB_ACK> CreateCHARACTER_INFO_DB_ACKDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint64_t uid = 0,
    common::RESULT_CODE result = common::RESULT_CODE_ERROR_FAIL,
    const char *nick_name = nullptr,
    common::CHARACTER_TYPE type = common::CHARACTER_TYPE_NONE,
    uint16_t belong = 0,
    flatbuffers::Offset<common::CHARACTER_FACE> face = 0,
    const std::vector<flatbuffers::Offset<common::CHARACTER_EQUIPMENT>> *equipment = nullptr) {
  auto nick_name__ = nick_name ? _fbb.CreateString(nick_name) : 0;
  auto equipment__ = equipment ? _fbb.CreateVector<flatbuffers::Offset<common::CHARACTER_EQUIPMENT>>(*equipment) : 0;
  return protocol_svr::CreateCHARACTER_INFO_DB_ACK(
      _fbb,
      uid,
      result,
      nick_name__,
      type,
      belong,
      face,
      equipment__);
}

struct CHARACTER_NAME_DUPLICATION_DB_REQ FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef CHARACTER_NAME_DUPLICATION_DB_REQBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_UID = 4,
    VT_NICK_NAME = 6
  };
  uint64_t uid() const {
    return GetField<uint64_t>(VT_UID, 0);
  }
  const flatbuffers::String *nick_name() const {
    return GetPointer<const flatbuffers::String *>(VT_NICK_NAME);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint64_t>(verifier, VT_UID) &&
           VerifyOffset(verifier, VT_NICK_NAME) &&
           verifier.VerifyString(nick_name()) &&
           verifier.EndTable();
  }
};

struct CHARACTER_NAME_DUPLICATION_DB_REQBuilder {
  typedef CHARACTER_NAME_DUPLICATION_DB_REQ Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_uid(uint64_t uid) {
    fbb_.AddElement<uint64_t>(CHARACTER_NAME_DUPLICATION_DB_REQ::VT_UID, uid, 0);
  }
  void add_nick_name(flatbuffers::Offset<flatbuffers::String> nick_name) {
    fbb_.AddOffset(CHARACTER_NAME_DUPLICATION_DB_REQ::VT_NICK_NAME, nick_name);
  }
  explicit CHARACTER_NAME_DUPLICATION_DB_REQBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<CHARACTER_NAME_DUPLICATION_DB_REQ> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<CHARACTER_NAME_DUPLICATION_DB_REQ>(end);
    return o;
  }
};

inline flatbuffers::Offset<CHARACTER_NAME_DUPLICATION_DB_REQ> CreateCHARACTER_NAME_DUPLICATION_DB_REQ(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint64_t uid = 0,
    flatbuffers::Offset<flatbuffers::String> nick_name = 0) {
  CHARACTER_NAME_DUPLICATION_DB_REQBuilder builder_(_fbb);
  builder_.add_uid(uid);
  builder_.add_nick_name(nick_name);
  return builder_.Finish();
}

inline flatbuffers::Offset<CHARACTER_NAME_DUPLICATION_DB_REQ> CreateCHARACTER_NAME_DUPLICATION_DB_REQDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint64_t uid = 0,
    const char *nick_name = nullptr) {
  auto nick_name__ = nick_name ? _fbb.CreateString(nick_name) : 0;
  return protocol_svr::CreateCHARACTER_NAME_DUPLICATION_DB_REQ(
      _fbb,
      uid,
      nick_name__);
}

struct CHARACTER_NAME_DUPLICATION_DB_ACK FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef CHARACTER_NAME_DUPLICATION_DB_ACKBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_UID = 4,
    VT_RESULT = 6,
    VT_NICK_NAME = 8
  };
  uint64_t uid() const {
    return GetField<uint64_t>(VT_UID, 0);
  }
  common::RESULT_CODE result() const {
    return static_cast<common::RESULT_CODE>(GetField<uint32_t>(VT_RESULT, 0));
  }
  const flatbuffers::String *nick_name() const {
    return GetPointer<const flatbuffers::String *>(VT_NICK_NAME);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint64_t>(verifier, VT_UID) &&
           VerifyField<uint32_t>(verifier, VT_RESULT) &&
           VerifyOffset(verifier, VT_NICK_NAME) &&
           verifier.VerifyString(nick_name()) &&
           verifier.EndTable();
  }
};

struct CHARACTER_NAME_DUPLICATION_DB_ACKBuilder {
  typedef CHARACTER_NAME_DUPLICATION_DB_ACK Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_uid(uint64_t uid) {
    fbb_.AddElement<uint64_t>(CHARACTER_NAME_DUPLICATION_DB_ACK::VT_UID, uid, 0);
  }
  void add_result(common::RESULT_CODE result) {
    fbb_.AddElement<uint32_t>(CHARACTER_NAME_DUPLICATION_DB_ACK::VT_RESULT, static_cast<uint32_t>(result), 0);
  }
  void add_nick_name(flatbuffers::Offset<flatbuffers::String> nick_name) {
    fbb_.AddOffset(CHARACTER_NAME_DUPLICATION_DB_ACK::VT_NICK_NAME, nick_name);
  }
  explicit CHARACTER_NAME_DUPLICATION_DB_ACKBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<CHARACTER_NAME_DUPLICATION_DB_ACK> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<CHARACTER_NAME_DUPLICATION_DB_ACK>(end);
    return o;
  }
};

inline flatbuffers::Offset<CHARACTER_NAME_DUPLICATION_DB_ACK> CreateCHARACTER_NAME_DUPLICATION_DB_ACK(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint64_t uid = 0,
    common::RESULT_CODE result = common::RESULT_CODE_ERROR_FAIL,
    flatbuffers::Offset<flatbuffers::String> nick_name = 0) {
  CHARACTER_NAME_DUPLICATION_DB_ACKBuilder builder_(_fbb);
  builder_.add_uid(uid);
  builder_.add_nick_name(nick_name);
  builder_.add_result(result);
  return builder_.Finish();
}

inline flatbuffers::Offset<CHARACTER_NAME_DUPLICATION_DB_ACK> CreateCHARACTER_NAME_DUPLICATION_DB_ACKDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint64_t uid = 0,
    common::RESULT_CODE result = common::RESULT_CODE_ERROR_FAIL,
    const char *nick_name = nullptr) {
  auto nick_name__ = nick_name ? _fbb.CreateString(nick_name) : 0;
  return protocol_svr::CreateCHARACTER_NAME_DUPLICATION_DB_ACK(
      _fbb,
      uid,
      result,
      nick_name__);
}

struct CHARACTER_CREATE_DB_REQ FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef CHARACTER_CREATE_DB_REQBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_UID = 4,
    VT_NICK_NAME = 6,
    VT_TYPE = 8,
    VT_BELONG = 10,
    VT_FACE = 12,
    VT_EQUIPMENT = 14
  };
  uint64_t uid() const {
    return GetField<uint64_t>(VT_UID, 0);
  }
  const flatbuffers::String *nick_name() const {
    return GetPointer<const flatbuffers::String *>(VT_NICK_NAME);
  }
  common::CHARACTER_TYPE type() const {
    return static_cast<common::CHARACTER_TYPE>(GetField<uint8_t>(VT_TYPE, 0));
  }
  uint16_t belong() const {
    return GetField<uint16_t>(VT_BELONG, 0);
  }
  const common::CHARACTER_FACE *face() const {
    return GetPointer<const common::CHARACTER_FACE *>(VT_FACE);
  }
  const flatbuffers::Vector<flatbuffers::Offset<common::CHARACTER_EQUIPMENT>> *equipment() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<common::CHARACTER_EQUIPMENT>> *>(VT_EQUIPMENT);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint64_t>(verifier, VT_UID) &&
           VerifyOffset(verifier, VT_NICK_NAME) &&
           verifier.VerifyString(nick_name()) &&
           VerifyField<uint8_t>(verifier, VT_TYPE) &&
           VerifyField<uint16_t>(verifier, VT_BELONG) &&
           VerifyOffset(verifier, VT_FACE) &&
           verifier.VerifyTable(face()) &&
           VerifyOffset(verifier, VT_EQUIPMENT) &&
           verifier.VerifyVector(equipment()) &&
           verifier.VerifyVectorOfTables(equipment()) &&
           verifier.EndTable();
  }
};

struct CHARACTER_CREATE_DB_REQBuilder {
  typedef CHARACTER_CREATE_DB_REQ Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_uid(uint64_t uid) {
    fbb_.AddElement<uint64_t>(CHARACTER_CREATE_DB_REQ::VT_UID, uid, 0);
  }
  void add_nick_name(flatbuffers::Offset<flatbuffers::String> nick_name) {
    fbb_.AddOffset(CHARACTER_CREATE_DB_REQ::VT_NICK_NAME, nick_name);
  }
  void add_type(common::CHARACTER_TYPE type) {
    fbb_.AddElement<uint8_t>(CHARACTER_CREATE_DB_REQ::VT_TYPE, static_cast<uint8_t>(type), 0);
  }
  void add_belong(uint16_t belong) {
    fbb_.AddElement<uint16_t>(CHARACTER_CREATE_DB_REQ::VT_BELONG, belong, 0);
  }
  void add_face(flatbuffers::Offset<common::CHARACTER_FACE> face) {
    fbb_.AddOffset(CHARACTER_CREATE_DB_REQ::VT_FACE, face);
  }
  void add_equipment(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<common::CHARACTER_EQUIPMENT>>> equipment) {
    fbb_.AddOffset(CHARACTER_CREATE_DB_REQ::VT_EQUIPMENT, equipment);
  }
  explicit CHARACTER_CREATE_DB_REQBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<CHARACTER_CREATE_DB_REQ> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<CHARACTER_CREATE_DB_REQ>(end);
    return o;
  }
};

inline flatbuffers::Offset<CHARACTER_CREATE_DB_REQ> CreateCHARACTER_CREATE_DB_REQ(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint64_t uid = 0,
    flatbuffers::Offset<flatbuffers::String> nick_name = 0,
    common::CHARACTER_TYPE type = common::CHARACTER_TYPE_NONE,
    uint16_t belong = 0,
    flatbuffers::Offset<common::CHARACTER_FACE> face = 0,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<common::CHARACTER_EQUIPMENT>>> equipment = 0) {
  CHARACTER_CREATE_DB_REQBuilder builder_(_fbb);
  builder_.add_uid(uid);
  builder_.add_equipment(equipment);
  builder_.add_face(face);
  builder_.add_nick_name(nick_name);
  builder_.add_belong(belong);
  builder_.add_type(type);
  return builder_.Finish();
}

inline flatbuffers::Offset<CHARACTER_CREATE_DB_REQ> CreateCHARACTER_CREATE_DB_REQDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint64_t uid = 0,
    const char *nick_name = nullptr,
    common::CHARACTER_TYPE type = common::CHARACTER_TYPE_NONE,
    uint16_t belong = 0,
    flatbuffers::Offset<common::CHARACTER_FACE> face = 0,
    const std::vector<flatbuffers::Offset<common::CHARACTER_EQUIPMENT>> *equipment = nullptr) {
  auto nick_name__ = nick_name ? _fbb.CreateString(nick_name) : 0;
  auto equipment__ = equipment ? _fbb.CreateVector<flatbuffers::Offset<common::CHARACTER_EQUIPMENT>>(*equipment) : 0;
  return protocol_svr::CreateCHARACTER_CREATE_DB_REQ(
      _fbb,
      uid,
      nick_name__,
      type,
      belong,
      face,
      equipment__);
}

struct CHARACTER_CREATE_DB_ACK FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef CHARACTER_CREATE_DB_ACKBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_UID = 4,
    VT_RESULT = 6,
    VT_NICK_NAME = 8,
    VT_TYPE = 10,
    VT_BELONG = 12,
    VT_FACE = 14,
    VT_EQUIPMENT = 16
  };
  uint64_t uid() const {
    return GetField<uint64_t>(VT_UID, 0);
  }
  common::RESULT_CODE result() const {
    return static_cast<common::RESULT_CODE>(GetField<uint32_t>(VT_RESULT, 0));
  }
  const flatbuffers::String *nick_name() const {
    return GetPointer<const flatbuffers::String *>(VT_NICK_NAME);
  }
  common::CHARACTER_TYPE type() const {
    return static_cast<common::CHARACTER_TYPE>(GetField<uint8_t>(VT_TYPE, 0));
  }
  uint16_t belong() const {
    return GetField<uint16_t>(VT_BELONG, 0);
  }
  const common::CHARACTER_FACE *face() const {
    return GetPointer<const common::CHARACTER_FACE *>(VT_FACE);
  }
  const flatbuffers::Vector<flatbuffers::Offset<common::CHARACTER_EQUIPMENT>> *equipment() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<common::CHARACTER_EQUIPMENT>> *>(VT_EQUIPMENT);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint64_t>(verifier, VT_UID) &&
           VerifyField<uint32_t>(verifier, VT_RESULT) &&
           VerifyOffset(verifier, VT_NICK_NAME) &&
           verifier.VerifyString(nick_name()) &&
           VerifyField<uint8_t>(verifier, VT_TYPE) &&
           VerifyField<uint16_t>(verifier, VT_BELONG) &&
           VerifyOffset(verifier, VT_FACE) &&
           verifier.VerifyTable(face()) &&
           VerifyOffset(verifier, VT_EQUIPMENT) &&
           verifier.VerifyVector(equipment()) &&
           verifier.VerifyVectorOfTables(equipment()) &&
           verifier.EndTable();
  }
};

struct CHARACTER_CREATE_DB_ACKBuilder {
  typedef CHARACTER_CREATE_DB_ACK Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_uid(uint64_t uid) {
    fbb_.AddElement<uint64_t>(CHARACTER_CREATE_DB_ACK::VT_UID, uid, 0);
  }
  void add_result(common::RESULT_CODE result) {
    fbb_.AddElement<uint32_t>(CHARACTER_CREATE_DB_ACK::VT_RESULT, static_cast<uint32_t>(result), 0);
  }
  void add_nick_name(flatbuffers::Offset<flatbuffers::String> nick_name) {
    fbb_.AddOffset(CHARACTER_CREATE_DB_ACK::VT_NICK_NAME, nick_name);
  }
  void add_type(common::CHARACTER_TYPE type) {
    fbb_.AddElement<uint8_t>(CHARACTER_CREATE_DB_ACK::VT_TYPE, static_cast<uint8_t>(type), 0);
  }
  void add_belong(uint16_t belong) {
    fbb_.AddElement<uint16_t>(CHARACTER_CREATE_DB_ACK::VT_BELONG, belong, 0);
  }
  void add_face(flatbuffers::Offset<common::CHARACTER_FACE> face) {
    fbb_.AddOffset(CHARACTER_CREATE_DB_ACK::VT_FACE, face);
  }
  void add_equipment(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<common::CHARACTER_EQUIPMENT>>> equipment) {
    fbb_.AddOffset(CHARACTER_CREATE_DB_ACK::VT_EQUIPMENT, equipment);
  }
  explicit CHARACTER_CREATE_DB_ACKBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<CHARACTER_CREATE_DB_ACK> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<CHARACTER_CREATE_DB_ACK>(end);
    return o;
  }
};

inline flatbuffers::Offset<CHARACTER_CREATE_DB_ACK> CreateCHARACTER_CREATE_DB_ACK(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint64_t uid = 0,
    common::RESULT_CODE result = common::RESULT_CODE_ERROR_FAIL,
    flatbuffers::Offset<flatbuffers::String> nick_name = 0,
    common::CHARACTER_TYPE type = common::CHARACTER_TYPE_NONE,
    uint16_t belong = 0,
    flatbuffers::Offset<common::CHARACTER_FACE> face = 0,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<common::CHARACTER_EQUIPMENT>>> equipment = 0) {
  CHARACTER_CREATE_DB_ACKBuilder builder_(_fbb);
  builder_.add_uid(uid);
  builder_.add_equipment(equipment);
  builder_.add_face(face);
  builder_.add_nick_name(nick_name);
  builder_.add_result(result);
  builder_.add_belong(belong);
  builder_.add_type(type);
  return builder_.Finish();
}

inline flatbuffers::Offset<CHARACTER_CREATE_DB_ACK> CreateCHARACTER_CREATE_DB_ACKDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint64_t uid = 0,
    common::RESULT_CODE result = common::RESULT_CODE_ERROR_FAIL,
    const char *nick_name = nullptr,
    common::CHARACTER_TYPE type = common::CHARACTER_TYPE_NONE,
    uint16_t belong = 0,
    flatbuffers::Offset<common::CHARACTER_FACE> face = 0,
    const std::vector<flatbuffers::Offset<common::CHARACTER_EQUIPMENT>> *equipment = nullptr) {
  auto nick_name__ = nick_name ? _fbb.CreateString(nick_name) : 0;
  auto equipment__ = equipment ? _fbb.CreateVector<flatbuffers::Offset<common::CHARACTER_EQUIPMENT>>(*equipment) : 0;
  return protocol_svr::CreateCHARACTER_CREATE_DB_ACK(
      _fbb,
      uid,
      result,
      nick_name__,
      type,
      belong,
      face,
      equipment__);
}

}  // namespace protocol_svr

#endif  // FLATBUFFERS_GENERATED_PROTOCOLSVR_PROTOCOL_SVR_H_
