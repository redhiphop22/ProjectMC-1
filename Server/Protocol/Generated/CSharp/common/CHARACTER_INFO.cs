// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace common
{

using global::System;
using global::System.Collections.Generic;
using global::FlatBuffers;

public struct CHARACTER_INFO : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_2_0_0(); }
  public static CHARACTER_INFO GetRootAsCHARACTER_INFO(ByteBuffer _bb) { return GetRootAsCHARACTER_INFO(_bb, new CHARACTER_INFO()); }
  public static CHARACTER_INFO GetRootAsCHARACTER_INFO(ByteBuffer _bb, CHARACTER_INFO obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public CHARACTER_INFO __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public string Name { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetNameBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetNameBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetNameArray() { return __p.__vector_as_array<byte>(4); }
  public ushort HairIdx { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetUshort(o + __p.bb_pos) : (ushort)0; } }
  public byte HairColor { get { int o = __p.__offset(8); return o != 0 ? __p.bb.Get(o + __p.bb_pos) : (byte)0; } }
  public ushort FaceIdx { get { int o = __p.__offset(10); return o != 0 ? __p.bb.GetUshort(o + __p.bb_pos) : (ushort)0; } }
  public byte FaceColor { get { int o = __p.__offset(12); return o != 0 ? __p.bb.Get(o + __p.bb_pos) : (byte)0; } }

  public static Offset<common.CHARACTER_INFO> CreateCHARACTER_INFO(FlatBufferBuilder builder,
      StringOffset nameOffset = default(StringOffset),
      ushort hair_idx = 0,
      byte hair_color = 0,
      ushort face_idx = 0,
      byte face_color = 0) {
    builder.StartTable(5);
    CHARACTER_INFO.AddName(builder, nameOffset);
    CHARACTER_INFO.AddFaceIdx(builder, face_idx);
    CHARACTER_INFO.AddHairIdx(builder, hair_idx);
    CHARACTER_INFO.AddFaceColor(builder, face_color);
    CHARACTER_INFO.AddHairColor(builder, hair_color);
    return CHARACTER_INFO.EndCHARACTER_INFO(builder);
  }

  public static void StartCHARACTER_INFO(FlatBufferBuilder builder) { builder.StartTable(5); }
  public static void AddName(FlatBufferBuilder builder, StringOffset nameOffset) { builder.AddOffset(0, nameOffset.Value, 0); }
  public static void AddHairIdx(FlatBufferBuilder builder, ushort hairIdx) { builder.AddUshort(1, hairIdx, 0); }
  public static void AddHairColor(FlatBufferBuilder builder, byte hairColor) { builder.AddByte(2, hairColor, 0); }
  public static void AddFaceIdx(FlatBufferBuilder builder, ushort faceIdx) { builder.AddUshort(3, faceIdx, 0); }
  public static void AddFaceColor(FlatBufferBuilder builder, byte faceColor) { builder.AddByte(4, faceColor, 0); }
  public static Offset<common.CHARACTER_INFO> EndCHARACTER_INFO(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<common.CHARACTER_INFO>(o);
  }
};


}
