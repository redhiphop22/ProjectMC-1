// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace protocol
{

using global::System;
using global::System.Collections.Generic;
using global::FlatBuffers;

public struct SERVER_CONNECT_C2S : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_2_0_0(); }
  public static SERVER_CONNECT_C2S GetRootAsSERVER_CONNECT_C2S(ByteBuffer _bb) { return GetRootAsSERVER_CONNECT_C2S(_bb, new SERVER_CONNECT_C2S()); }
  public static SERVER_CONNECT_C2S GetRootAsSERVER_CONNECT_C2S(ByteBuffer _bb, SERVER_CONNECT_C2S obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public SERVER_CONNECT_C2S __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public ulong Uid { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetUlong(o + __p.bb_pos) : (ulong)0; } }
  public string Id { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetIdBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetIdBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetIdArray() { return __p.__vector_as_array<byte>(6); }

  public static Offset<protocol.SERVER_CONNECT_C2S> CreateSERVER_CONNECT_C2S(FlatBufferBuilder builder,
      ulong uid = 0,
      StringOffset idOffset = default(StringOffset)) {
    builder.StartTable(2);
    SERVER_CONNECT_C2S.AddUid(builder, uid);
    SERVER_CONNECT_C2S.AddId(builder, idOffset);
    return SERVER_CONNECT_C2S.EndSERVER_CONNECT_C2S(builder);
  }

  public static void StartSERVER_CONNECT_C2S(FlatBufferBuilder builder) { builder.StartTable(2); }
  public static void AddUid(FlatBufferBuilder builder, ulong uid) { builder.AddUlong(0, uid, 0); }
  public static void AddId(FlatBufferBuilder builder, StringOffset idOffset) { builder.AddOffset(1, idOffset.Value, 0); }
  public static Offset<protocol.SERVER_CONNECT_C2S> EndSERVER_CONNECT_C2S(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<protocol.SERVER_CONNECT_C2S>(o);
  }
};


}
